name: Build and Scan Application

on:
  workflow_call:
    outputs:
      image-digest:
        description: "Built image digest"
        value: ${{ jobs.build-and-container-scan.outputs.digest }}
      image-tag:
        description: "Built image tag"
        value: ${{ jobs.build-and-container-scan.outputs.tag }}
      scan-result:
        description: "Container scan result"
        value: ${{ jobs.build-and-container-scan.outputs.scan-result }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  container-scan-trivy:
    name: Container Scan with Trivy
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.imageid }}
      tag: ${{ steps.meta.outputs.tags }}
      result: ${{ steps.scan-result.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: ./code
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        id: scan-tool
        uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2 # 0.28.0
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
        continue-on-error: false

      - name: Set scan result
        id: scan-result
        if: always()
        env:
          SCAN_OUTCOME: ${{ steps.scan-tool.outcome }}
        run: |
          if [ "$SCAN_OUTCOME" == "success" ]; then
            echo "result=success" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Container scan passed - no critical vulnerabilities found"
          else
            echo "result=failure" >> "$GITHUB_OUTPUT"
            echo "‚ùå Container scan failed - critical vulnerabilities detected"
            exit 1
          fi

      - name: Build Summary
        if: always()
        env:
          SCAN_OUTCOME: ${{ steps.scan-tool.outcome }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAGS: ${{ steps.meta.outputs.tags }}
          IMAGE_ID: ${{ steps.build.outputs.imageid }}
          SCAN_RESULT: ${{ steps.scan-result.outputs.result }}
        run: |
          echo "üì¶ Build and Scan Summary:"
          echo "- Image built successfully: $REGISTRY/$IMAGE_NAME"
          echo "- Tags: $TAGS"
          echo "- Image ID: $IMAGE_ID"
          echo "- Security scan: $SCAN_RESULT"
          if [ "$SCAN_OUTCOME" == "success" ]; then
            echo "‚úÖ Build and scan completed successfully"
          else
            echo "‚ùå Build completed but scan failed"
          fi
  container-scan-grype:
    name: Container Scan with Grype
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    outputs:
      digest: ${{ steps.build.outputs.imageid }}
      tag: ${{ steps.meta.outputs.tags }}
      result: ${{ steps.scan-result.outputs.result }}

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: ./code
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Grype vulnerability scanner
        id: scan-tool
        uses: anchore/scan-action@df395807f4554463d4455b8047cf58e37b6acaae # v6.5.0
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          fail-build: true
          severity-cutoff: high
          output-format: sarif
          add-cpes-if-none: true

      - name: Upload SARIF to GitHub Advanced Security
        if: always()
        uses: github/codeql-action/upload-sarif@51f77329afa6477de8c49fc9c7046c15b9a4e79d #3.29.5
        with:
          sarif_file: ${{ steps.scan-tool.outputs.sarif }}
          category: grype-container-scan

      - name: Set scan result
        id: scan-result
        if: always()
        env:
          SCAN_OUTCOME: ${{ steps.scan-tool.outcome }}
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "üîç View findings: https://github.com/${{ github.repository }}/security/code-scanning?query=pr%3A${{ github.event.number }}+is%3Aopen"
          else
            echo "üîç View findings: https://github.com/${{ github.repository }}/security/code-scanning"
          fi
          exit 1

      - name: Build Summary
        if: always()
        env:
          SCAN_OUTCOME: ${{ steps.scan-tool.outcome }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAGS: ${{ steps.meta.outputs.tags }}
          IMAGE_ID: ${{ steps.build.outputs.imageid }}
          SCAN_RESULT: ${{ steps.scan-result.outputs.result }}
        run: |
          echo "üì¶ Build and Scan Summary:"
          echo "- Image built successfully: $REGISTRY/$IMAGE_NAME"
          echo "- Tags: $TAGS"
          echo "- Image ID: $IMAGE_ID"
          echo "- Security scan: $SCAN_RESULT"
          if [ "$SCAN_OUTCOME" == "success" ]; then
            echo "‚úÖ Build and scan completed successfully"
          else
            echo "‚ùå Build completed but scan failed"
          fi
